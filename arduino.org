#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+options: num:nil 
#+options: html-postamble:nil

#+title: Arduinoでエアコン自動化

-----

#+begin_center
Author:  [[https://rharuyama.github.io/][Ryo Haruyama]]
#+end_center

#+begin_quote
/このプロジェクトは現在進行中で、本稿はいまだに内容が少なく、かつ解説がわかりにくいです。いずれキリの良いタイミングで、わかりやすく書き直すと思います。/

/[[https://twitter.com/tsnghsi0402][このアカウント]]では「Arduinoでエアコン自動化」に関する進捗を随時更新しています。そちらを見ていただければ最新の情報にたどりつけます。/
#+end_quote

* はじめに
この文章は、マイクロコンピュータ(マイコン)を用いてエアコンを自動化することを目標にした開発の備忘録で、現在執筆中です。

マイコンとは、ざっくりいうと小さいコンピュータです。パソコンと違ってディスプレイやキーボードがついておらず、機器は必要に応じてくっつけていきます。例えば、光や温度のセンサーから情報を得てプログラムで処理し、モーターに働きかけることなどができます。

以下、専門的な話が続きます。

* 背景
todo

* 買い物
真先に買ったのはこのスターターキットです。

- [[https://www.amazon.co.jp/gp/product/B06XF2HZGT/ref=ppx_yo_dt_b_asin_title_o06_s00?ie=UTF8&psc=1][ELEGOO Arduino用UNO R3スターターキット レベルアップ チュートリアル付 mega2560 r3 nanoと互換 [並行輸入品]​]]

しかし購入してたったの一日でUNO R3 Boardをショートさせて壊してしまいました。回路を配線するときはネットで拾ってきた自分が理解していない回路を組むべきではない、という教訓を得ました。代わりに買ったのがこれです。
  
- [[https://www.amazon.co.jp/gp/product/B086WWNP9Y/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&psc=1][VKLSVAN ESP32 ESP-32S NodeMCUマイクロUSBデュアルコア開発ボードモジュール 2.4GHz ワイヤレスWiFi + Bluetoothデュアルモード ESP-WROOM-32モジュール内臓 マイクロコントローラ]]

大須アメ横ビルで赤外線LED購入

* 環境構築
ホスト環境は以下の通りです：
#+begin_src
$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.5 LTS
Release:	18.04
Codename:	bionic
#+end_src

Arduino IDEの設定については次のブログが参考になります。

- [[https://101010.fun/iot/esp32-blink-led.html][ESP32でLチカするまでの設定]]

このブログにはGUIのArduino IDEを用いる方法が書かれています。しかし私の環境ではこの方法は少し問題がありました。具体的にいうと、以前行なった設定がリブート後に持ち越せませんでした。ですので、次に紹介するCLIを使うことにしました。

- [[https://arduino.github.io/arduino-cli/0.21/installation/][Arduino CLI Installation]]

- [[https://arduino.github.io/arduino-cli/0.21/getting-started/][Arduino CLI Getting started]]

エディタはemacsで、c-modeをhookして使いました。

#+begin_src
;; ~/.emacs.d/init.el
;; hook c-mode when .ino extension
(add-to-list 'auto-mode-alist
             '("\\.ino\\'" . (lambda ()   
                               (c-mode)
			       )))
#+end_src

ビルドはコマンドラインから行います。

#+begin_src
# Makefile
DEV = ttyUSB0
CC = /opt/arduino-cli_0.20.2_Linux_64bit/arduino-cli

monitor:up
	$(CC) monitor -p /dev/$(DEV)

up:compile
	$(CC) upload --port /dev/$(DEV) --fqbn esp32:esp32:esp32 .

compile:device
	$(CC) compile --fqbn esp32:esp32:esp32 .

device:
	sudo chmod a+rw /dev/$(DEV)

new:
	$(CC) sketch new $(SRC)
#+end_src

arduino-cliコマンドのパスを通します。

#+begin_src
# ~/.bashrc
export PATH="$PATH:/opt/arduino-cli_0.20.2_Linux_64bit/"
#+end_src

* Arduinoで内蔵LEDを点滅させる
todo
* Arduinoで外部LEDを点滅させる
#+begin_src
#define LED_PIN 13

void setup() {
  pinMode(LED_PIN, OUTPUT);
}

void loop() {
  digitalWrite(LED_PIN, HIGH);
  delay(500);
  digitalWrite(LED_PIN, LOW);
  delay(500);
}
#+end_src

[[./images-a/led.jpg]]

[[./images-a/circuit.jpg]]

* Arduinoで赤外線を受信し、16進数で取得
- [[https://omoroya.com/arduino-lesson15/][Arduino 入門 Lesson 15 【赤外線受信センサモジュール編】]]
  
- [[https://www.youtube.com/watch?v=8E3ltjnbV0c][Using IR Remote Controls with the Arduino]]

* LEDをトランジスタで点滅させる
todo

* 赤外線LEDをトランジスタで点滅させる
todo

* WiFi経由でLEDを点滅させる
- [[https://shinog.jp/computer/arduino/esp32-%E3%81%AE-wi-fi-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/][ESP32 の Wi-Fi を使ってみる]]

* フロントエンド
Elm + VSCode/emacs

Elmを使うとき、メッセージでつまづきがち。この図とコードの対応、msgが型変数であることを確認して、この図をいつでも書けるようにしておくことが重要です。

- [[https://guide.elm-lang.jp/architecture/][図(基本的なパターン)]]

- [[https://github.com/avh4/elm-format][elm-format]]
- [[https://github.com/jinjor/elm-book/tree/master/3_7_search-box][search-box]]
- [[https://guide.elm-lang.jp/interop/][JavaScriptとの相互運用]]

* バックエンド
Rust + emacs

- [[https://caddi.tech/archives/416][RustでWebアプリケーションを作る]]
- [[https://docs.rs/warp/0.1.16/warp/filters/cors/fn.cors.html][Function warp::filters::cors::cors]]

* その他
- [[https://peer2.net/sjdojo/?p=11901][スマートメーターから電力消費データを読み出すには]]
- [[https://asukiaaa.blogspot.com/2018/05/arduino.html][Arduinoで赤外線リモコンの値を読み取り、送信する方法]]
- [[https://randomnerdtutorials.com/esp32-ntp-client-date-time-arduino-ide/][Getting Date and Time with ESP32 on Arduino IDE (NTP Client)]]
